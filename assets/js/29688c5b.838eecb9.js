"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[281],{3905:(e,t,n)=>{n.d(t,{Zo:()=>_,kt:()=>u});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),i=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},_=function(e){var t=i(e.components);return a.createElement(p.Provider,{value:t},e.children)},N={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},C=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,p=e.parentName,_=s(e,["components","mdxType","originalType","parentName"]),C=i(n),u=l,c=C["".concat(p,".").concat(u)]||C[u]||N[u]||r;return n?a.createElement(c,o(o({ref:t},_),{},{components:n})):a.createElement(c,o({ref:t},_))}));function u(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=C;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:l,o[1]=s;for(var i=2;i<r;i++)o[i]=n[i];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}C.displayName="MDXCreateElement"},4684:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>N,frontMatter:()=>r,metadata:()=>s,toc:()=>i});var a=n(7462),l=(n(7294),n(3905));const r={pagination_next:null,pagination_prev:null},o="Use Knapsack Pro with `parallel_tests`",s={unversionedId:"ruby/parallel_tests",id:"ruby/parallel_tests",title:"Use Knapsack Pro with `parallel_tests`",description:"We recommend using Knapsack Pro with more CI nodes instead of knapsackpro + paralleltests with fewer CI nodes.",source:"@site/docs/ruby/parallel_tests.md",sourceDirName:"ruby",slug:"/ruby/parallel_tests",permalink:"/ruby/parallel_tests",draft:!1,editUrl:"https://github.com/KnapsackPro/docs.knapsackpro.com/tree/main/docusaurus/docs/ruby/parallel_tests.md",tags:[],version:"current",frontMatter:{pagination_next:null,pagination_prev:null},sidebar:"sidebar"},p={},i=[{value:"Example: <code>parallel_tests</code> with <code>knapsack_pro</code> on parallel CI nodes",id:"example-parallel_tests-with-knapsack_pro-on-parallel-ci-nodes",level:2},{value:"Example: <code>parallel_tests</code> with <code>knapsack_pro</code> on a single CI node",id:"example-parallel_tests-with-knapsack_pro-on-a-single-ci-node",level:2},{value:"Related FAQs",id:"related-faqs",level:2}],_={toc:i};function N(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},_,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"use-knapsack-pro-with-parallel_tests"},"Use Knapsack Pro with ",(0,l.kt)("inlineCode",{parentName:"h1"},"parallel_tests")),(0,l.kt)("admonition",{type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"We recommend using Knapsack Pro with more CI nodes instead of ",(0,l.kt)("inlineCode",{parentName:"p"},"knapsack_pro")," + ",(0,l.kt)("inlineCode",{parentName:"p"},"parallel_tests")," with fewer CI nodes.")),(0,l.kt)("p",null,"In our experience, parallelizing tests by running more than one process per CI node can result in slower test suites. In fact, it's easy to saturate CPU/RAM/IO when running multiple tests in parallel on a single CI node, especially with E2E tests."),(0,l.kt)("p",null,"To keep it simple, we recommend against ",(0,l.kt)("inlineCode",{parentName:"p"},"parallel_tests"),". Instead, consider more parallel CI nodes with Knapsack Pro in ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/KnapsackPro/knapsack_pro-ruby#queue-mode"},"Queue Mode")," if you are looking for fast tests execution and avoiding ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/grosser/parallel_tests/issues?q=is%3Aissue+is%3Aopen+output"},"confusing terminal outputs"),"."),(0,l.kt)("p",null,"In some cases, you may still consider using ",(0,l.kt)("inlineCode",{parentName:"p"},"knapsack_pro")," to exploit auto-balancing the tests split with ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/KnapsackPro/knapsack_pro-ruby#queue-mode"},"Queue Mode")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"parallel_tests")," to use fewer CI nodes. But monitor your ",(0,l.kt)("a",{parentName:"p",href:"/overview/#dashboard"},"Knapsack Pro dashboard")," for signs of saturated CI nodes:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Execution times of your CI builds are increasing: check ",(0,l.kt)("inlineCode",{parentName:"li"},"Recorded CI builds > Show (build) > Test Files > Total execution time")),(0,l.kt)("li",{parentName:"ul"},"Individual test stats are trending up: ",(0,l.kt)("inlineCode",{parentName:"li"},"Statistics of test files history > Stats (test file) > History of the test file (chart)")),(0,l.kt)("li",{parentName:"ul"},"Tests executed locally on your machine are faster than on your CI")),(0,l.kt)("p",null,"In case of saturation, consider:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Reducing the number of ",(0,l.kt)("inlineCode",{parentName:"li"},"parallel_tests")," processes"),(0,l.kt)("li",{parentName:"ul"},"Using more powerful CI nodes")),(0,l.kt)("h2",{id:"example-parallel_tests-with-knapsack_pro-on-parallel-ci-nodes"},"Example: ",(0,l.kt)("inlineCode",{parentName:"h2"},"parallel_tests")," with ",(0,l.kt)("inlineCode",{parentName:"h2"},"knapsack_pro")," on parallel CI nodes"),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Do this only if you have powerful CI nodes with a lot of CPU/RAM/IO that can handle multiple ",(0,l.kt)("inlineCode",{parentName:"p"},"parallel_tests")," processes.")),(0,l.kt)("p",null,"Goal:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"2 CI nodes"),(0,l.kt)("li",{parentName:"ul"},"3 processes per CI node"),(0,l.kt)("li",{parentName:"ul"},"6 total parallel processes")),(0,l.kt)("p",null,"On each CI node execute (refer to your CI docs for ",(0,l.kt)("inlineCode",{parentName:"p"},"$MY_CI_NODE_TOTAL")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"$MY_CI_NODE_INDEX"),"):"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"export PARALLEL_TESTS_CONCURRENCY=3\n\nRAILS_ENV=test \\\nKNAPSACK_PRO_TEST_SUITE_TOKEN_RSPEC=$MY_TOKEN \\\nKNAPSACK_PRO_CI_NODE_TOTAL=$MY_CI_NODE_TOTAL \\\nKNAPSACK_PRO_CI_NODE_INDEX=$MY_CI_NODE_INDEX \\\nbundle exec parallel_test -n $PARALLEL_TESTS_CONCURRENCY -e './bin/parallel_tests'\n")),(0,l.kt)("p",null,"Create ",(0,l.kt)("inlineCode",{parentName:"p"},"bin/parallel_tests")," and make it executable ",(0,l.kt)("inlineCode",{parentName:"p"},"chmod u+x"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\n# The Knapsack Pro API sees 3 * 2 = 6 parallel nodes\nexport KNAPSACK_PRO_CI_NODE_TOTAL=$(( $PARALLEL_TESTS_CONCURRENCY * $KNAPSACK_PRO_CI_NODE_TOTAL ))\n\nif [ "$TEST_ENV_NUMBER" == "" ]; then\n  export PARALLEL_TESTS_CONCURRENCY_INDEX=0\nelse\n  export PARALLEL_TESTS_CONCURRENCY_INDEX=$(( $TEST_ENV_NUMBER - 1 ))\nfi\n\n# The current index for the Knapsack Pro API is {0,1,2} + (3 * {0,1}) in other words either {0,1,2,3,4,5}\nKNAPSACK_PRO_CI_NODE_INDEX=$(( $PARALLEL_TESTS_CONCURRENCY_INDEX + ($PARALLEL_TESTS_CONCURRENCY * $KNAPSACK_PRO_CI_NODE_INDEX) ))\n\n# Debug log\necho KNAPSACK_PRO_CI_NODE_TOTAL=$KNAPSACK_PRO_CI_NODE_TOTAL KNAPSACK_PRO_CI_NODE_INDEX=$KNAPSACK_PRO_CI_NODE_INDEX PARALLEL_TESTS_CONCURRENCY=$PARALLEL_TESTS_CONCURRENCY\n\nbundle exec rake knapsack_pro:queue:rspec\n')),(0,l.kt)("p",null,"Running the above on CI should result in:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"First CI node:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"KNAPSACK_PRO_CI_NODE_TOTAL=6 KNAPSACK_PRO_CI_NODE_INDEX=0 PARALLEL_TESTS_CONCURRENCY=2\nKNAPSACK_PRO_CI_NODE_TOTAL=6 KNAPSACK_PRO_CI_NODE_INDEX=1 PARALLEL_TESTS_CONCURRENCY=2\n# ...\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Second CI node:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"KNAPSACK_PRO_CI_NODE_TOTAL=6 KNAPSACK_PRO_CI_NODE_INDEX=2 PARALLEL_TESTS_CONCURRENCY=2\nKNAPSACK_PRO_CI_NODE_TOTAL=6 KNAPSACK_PRO_CI_NODE_INDEX=3 PARALLEL_TESTS_CONCURRENCY=2\n# ...\n"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"Third CI node:"),(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"KNAPSACK_PRO_CI_NODE_TOTAL=6 KNAPSACK_PRO_CI_NODE_INDEX=4 PARALLEL_TESTS_CONCURRENCY=2\nKNAPSACK_PRO_CI_NODE_TOTAL=6 KNAPSACK_PRO_CI_NODE_INDEX=5 PARALLEL_TESTS_CONCURRENCY=2\n# ...\n")))),(0,l.kt)("h2",{id:"example-parallel_tests-with-knapsack_pro-on-a-single-ci-node"},"Example: ",(0,l.kt)("inlineCode",{parentName:"h2"},"parallel_tests")," with ",(0,l.kt)("inlineCode",{parentName:"h2"},"knapsack_pro")," on a single CI node"),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Do this only if you have a single powerful CI node with a lot of CPU/RAM/IO that can handle multiple ",(0,l.kt)("inlineCode",{parentName:"p"},"parallel_tests")," processes.")),(0,l.kt)("p",null,"Goal:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"1 CI node"),(0,l.kt)("li",{parentName:"ul"},"3 processes per CI node"),(0,l.kt)("li",{parentName:"ul"},"3 total parallel processes")),(0,l.kt)("p",null,"On the single CI node execute:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"export PARALLEL_TESTS_CONCURRENCY=3\n\nRAILS_ENV=test \\\n  KNAPSACK_PRO_TEST_SUITE_TOKEN_RSPEC=$MY_TOKEN \\\n  PARALLEL_TESTS_CONCURRENCY=$PARALLEL_TESTS_CONCURRENCY \\\n  bundle exec parallel_test -n $PARALLEL_TESTS_CONCURRENCY -e './bin/parallel_tests'\n")),(0,l.kt)("p",null,"Create ",(0,l.kt)("inlineCode",{parentName:"p"},"bin/parallel_tests")," and make it executable ",(0,l.kt)("inlineCode",{parentName:"p"},"chmod u+x"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\n# The Knapsack Pro API sees 3 parallel nodes\nexport KNAPSACK_PRO_CI_NODE_TOTAL=$PARALLEL_TESTS_CONCURRENCY\n\nif [ "$TEST_ENV_NUMBER" == "" ]; then\n  export PARALLEL_TESTS_CONCURRENCY_INDEX=0\nelse\n  export PARALLEL_TESTS_CONCURRENCY_INDEX=$(( $TEST_ENV_NUMBER - 1 ))\nfi\n\n# The current index for the Knapsack Pro API is {0,1,2}\nKNAPSACK_PRO_CI_NODE_INDEX=$PARALLEL_TESTS_CONCURRENCY_INDEX\n\n# Debug log\necho KNAPSACK_PRO_CI_NODE_TOTAL=$KNAPSACK_PRO_CI_NODE_TOTAL KNAPSACK_PRO_CI_NODE_INDEX=$KNAPSACK_PRO_CI_NODE_INDEX PARALLEL_TESTS_CONCURRENCY=$PARALLEL_TESTS_CONCURRENCY\n\nbundle exec rake knapsack_pro:queue:rspec\n')),(0,l.kt)("p",null,"Running the above on CI should result in:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"First (and only) CI node:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"KNAPSACK_PRO_CI_NODE_TOTAL=3 KNAPSACK_PRO_CI_NODE_INDEX=0 PARALLEL_TESTS_CONCURRENCY=3\nKNAPSACK_PRO_CI_NODE_TOTAL=3 KNAPSACK_PRO_CI_NODE_INDEX=1 PARALLEL_TESTS_CONCURRENCY=3\nKNAPSACK_PRO_CI_NODE_TOTAL=3 KNAPSACK_PRO_CI_NODE_INDEX=2 PARALLEL_TESTS_CONCURRENCY=3\n# ...\n")),(0,l.kt)("h2",{id:"related-faqs"},"Related FAQs"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://knapsackpro.com/faq/question/how-to-run-knapsack_pro-with-parallel_tests-gem"},"How to run ",(0,l.kt)("inlineCode",{parentName:"a"},"knapsack_pro")," with ",(0,l.kt)("inlineCode",{parentName:"a"},"parallel_tests")," gem?")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://knapsackpro.com/faq/question/parallel_tests-with-knapsack_pro-on-parallel-ci-nodes"},(0,l.kt)("inlineCode",{parentName:"a"},"parallel_tests")," with ",(0,l.kt)("inlineCode",{parentName:"a"},"knapsack_pro")," on parallel CI nodes")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://knapsackpro.com/faq/question/parallel_tests-with-knapsack_pro-on-single-ci-machine"},(0,l.kt)("inlineCode",{parentName:"a"},"parallel_tests")," with ",(0,l.kt)("inlineCode",{parentName:"a"},"knapsack_pro")," on single CI machine"))))}N.isMDXComponent=!0}}]);