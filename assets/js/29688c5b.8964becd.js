"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[281],{3905:(e,n,a)=>{a.d(n,{Zo:()=>i,kt:()=>u});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function l(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function p(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?l(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function o(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},l=Object.keys(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)a=l[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=t.createContext({}),_=function(e){var n=t.useContext(s),a=n;return e&&(a="function"==typeof e?e(n):p(p({},n),e)),a},i=function(e){var n=_(e.components);return t.createElement(s.Provider,{value:n},e.children)},N={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},C=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,l=e.originalType,s=e.parentName,i=o(e,["components","mdxType","originalType","parentName"]),C=_(a),u=r,c=C["".concat(s,".").concat(u)]||C[u]||N[u]||l;return a?t.createElement(c,p(p({ref:n},i),{},{components:a})):t.createElement(c,p({ref:n},i))}));function u(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=a.length,p=new Array(l);p[0]=C;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,p[1]=o;for(var _=2;_<l;_++)p[_]=a[_];return t.createElement.apply(null,p)}return t.createElement.apply(null,a)}C.displayName="MDXCreateElement"},4684:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>s,contentTitle:()=>p,default:()=>N,frontMatter:()=>l,metadata:()=>o,toc:()=>_});var t=a(7462),r=(a(7294),a(3905));const l={pagination_next:null,pagination_prev:null},p="Use Knapsack Pro with `parallel_tests`",o={unversionedId:"ruby/parallel_tests",id:"ruby/parallel_tests",title:"Use Knapsack Pro with `parallel_tests`",description:"We recommend using Knapsack Pro with more CI nodes instead of knapsackpro + paralleltests with fewer CI nodes.",source:"@site/docs/ruby/parallel_tests.md",sourceDirName:"ruby",slug:"/ruby/parallel_tests",permalink:"/ruby/parallel_tests",draft:!1,editUrl:"https://github.com/KnapsackPro/docs.knapsackpro.com/tree/main/docusaurus/docs/ruby/parallel_tests.md",tags:[],version:"current",frontMatter:{pagination_next:null,pagination_prev:null}},s={},_=[{value:"Example: <code>parallel_tests</code> with <code>knapsack_pro</code> on parallel CI nodes",id:"example-parallel_tests-with-knapsack_pro-on-parallel-ci-nodes",level:2},{value:"Example: <code>parallel_tests</code> with <code>knapsack_pro</code> on a single CI node",id:"example-parallel_tests-with-knapsack_pro-on-a-single-ci-node",level:2},{value:"Related FAQs",id:"related-faqs",level:2}],i={toc:_};function N(e){let{components:n,...a}=e;return(0,r.kt)("wrapper",(0,t.Z)({},i,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"use-knapsack-pro-with-parallel_tests"},"Use Knapsack Pro with ",(0,r.kt)("inlineCode",{parentName:"h1"},"parallel_tests")),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"We recommend using Knapsack Pro with more CI nodes instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"knapsack_pro")," + ",(0,r.kt)("inlineCode",{parentName:"p"},"parallel_tests")," with fewer CI nodes.")),(0,r.kt)("p",null,"In our experience, parallelizing tests by running more than one process per CI node can result in slower test suites. In fact, it's easy to saturate CPU/RAM/IO when running multiple tests in parallel on a single CI node, especially with E2E tests."),(0,r.kt)("p",null,"To keep it simple, we recommend against ",(0,r.kt)("inlineCode",{parentName:"p"},"parallel_tests"),". Instead, consider more parallel CI nodes with Knapsack Pro in ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/KnapsackPro/knapsack_pro-ruby#queue-mode"},"Queue Mode")," if you are looking for fast tests execution and ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/grosser/parallel_tests/issues?q=is%3Aissue+is%3Aopen+output"},"clear terminal outputs"),"."),(0,r.kt)("p",null,"In some cases, you may still consider using ",(0,r.kt)("inlineCode",{parentName:"p"},"knapsack_pro")," to exploit auto-balancing the tests split with ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/KnapsackPro/knapsack_pro-ruby#queue-mode"},"Queue Mode")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"parallel_tests")," to use fewer CI nodes. But keep your eyes on the ",(0,r.kt)("a",{parentName:"p",href:"/overview/#dashboard"},"Knapsack Pro dashboard")," to check if your CI nodes are saturated and either:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"reduce the number of parallel processes in ",(0,r.kt)("inlineCode",{parentName:"li"},"parallel_tests")),(0,r.kt)("li",{parentName:"ul"},"buy more powerful CI nodes")),(0,r.kt)("h2",{id:"example-parallel_tests-with-knapsack_pro-on-parallel-ci-nodes"},"Example: ",(0,r.kt)("inlineCode",{parentName:"h2"},"parallel_tests")," with ",(0,r.kt)("inlineCode",{parentName:"h2"},"knapsack_pro")," on parallel CI nodes"),(0,r.kt)("p",null,"Goal:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"2 CI nodes"),(0,r.kt)("li",{parentName:"ul"},"3 processes per CI node"),(0,r.kt)("li",{parentName:"ul"},"6 total parallel processes")),(0,r.kt)("p",null,"On each CI node execute:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export PARALLEL_TESTS_CONCURRENCY=3\n\nRAILS_ENV=test \\\nKNAPSACK_PRO_TEST_SUITE_TOKEN_RSPEC=$MY_TOKEN \\\nKNAPSACK_PRO_CI_NODE_TOTAL=$MY_CI_NODE_TOTAL \\\nKNAPSACK_PRO_CI_NODE_INDEX=$MY_CI_NODE_INDEX \\\nbundle exec parallel_test -n $PARALLEL_TESTS_CONCURRENCY -e './bin/parallel_tests'\n")),(0,r.kt)("p",null,"Refer to your CI docs for ",(0,r.kt)("inlineCode",{parentName:"p"},"$MY_CI_NODE_TOTAL")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"$MY_CI_NODE_INDEX"),". For example, on CircleCI you can use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"test:\n  override:\n    - export PARALLEL_TESTS_CONCURRENCY=3; RAILS_ENV=test KNAPSACK_PRO_CI_NODE_TOTAL=$CIRCLE_NODE_TOTAL KNAPSACK_PRO_CI_NODE_INDEX=$CIRCLE_NODE_INDEX bundle exec parallel_test -n $PARALLEL_TESTS_CONCURRENCY -e './bin/parallel_tests':\n        parallel: true # \u26d4\ufe0f 8-space indentation\n")),(0,r.kt)("p",null,"Create ",(0,r.kt)("inlineCode",{parentName:"p"},"bin/parallel_tests")," and make it executable ",(0,r.kt)("inlineCode",{parentName:"p"},"chmod u+x"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\n# The Knapsack Pro API sees 3 * 2 = 6 parallel nodes\nexport KNAPSACK_PRO_CI_NODE_TOTAL=$(( $PARALLEL_TESTS_CONCURRENCY * $KNAPSACK_PRO_CI_NODE_TOTAL ))\n\nif [ "$TEST_ENV_NUMBER" == "" ]; then\n  export PARALLEL_TESTS_CONCURRENCY_INDEX=0\nelse\n  export PARALLEL_TESTS_CONCURRENCY_INDEX=$(( $TEST_ENV_NUMBER - 1 ))\nfi\n\n# The current index for the Knapsack Pro API is {0,1,2} + (3 * {0,1}) in other words either {0,1,2,3,4,5}\nKNAPSACK_PRO_CI_NODE_INDEX=$(( $PARALLEL_TESTS_CONCURRENCY_INDEX + ($PARALLEL_TESTS_CONCURRENCY * $KNAPSACK_PRO_CI_NODE_INDEX) ))\n\n# Debug log\necho KNAPSACK_PRO_CI_NODE_TOTAL=$KNAPSACK_PRO_CI_NODE_TOTAL KNAPSACK_PRO_CI_NODE_INDEX=$KNAPSACK_PRO_CI_NODE_INDEX PARALLEL_TESTS_CONCURRENCY=$PARALLEL_TESTS_CONCURRENCY\n\nbundle exec rake knapsack_pro:queue:rspec\n')),(0,r.kt)("p",null,"Running the above on CI should result in:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"First CI node:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"KNAPSACK_PRO_CI_NODE_TOTAL=6 KNAPSACK_PRO_CI_NODE_INDEX=0 PARALLEL_TESTS_CONCURRENCY=2\nKNAPSACK_PRO_CI_NODE_TOTAL=6 KNAPSACK_PRO_CI_NODE_INDEX=1 PARALLEL_TESTS_CONCURRENCY=2\n# ...\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Second CI node:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"KNAPSACK_PRO_CI_NODE_TOTAL=6 KNAPSACK_PRO_CI_NODE_INDEX=2 PARALLEL_TESTS_CONCURRENCY=2\nKNAPSACK_PRO_CI_NODE_TOTAL=6 KNAPSACK_PRO_CI_NODE_INDEX=3 PARALLEL_TESTS_CONCURRENCY=2\n# ...\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Third CI node:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"KNAPSACK_PRO_CI_NODE_TOTAL=6 KNAPSACK_PRO_CI_NODE_INDEX=4 PARALLEL_TESTS_CONCURRENCY=2\nKNAPSACK_PRO_CI_NODE_TOTAL=6 KNAPSACK_PRO_CI_NODE_INDEX=5 PARALLEL_TESTS_CONCURRENCY=2\n# ...\n")))),(0,r.kt)("h2",{id:"example-parallel_tests-with-knapsack_pro-on-a-single-ci-node"},"Example: ",(0,r.kt)("inlineCode",{parentName:"h2"},"parallel_tests")," with ",(0,r.kt)("inlineCode",{parentName:"h2"},"knapsack_pro")," on a single CI node"),(0,r.kt)("p",null,"Goal:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"1 CI node"),(0,r.kt)("li",{parentName:"ul"},"3 processes per CI node"),(0,r.kt)("li",{parentName:"ul"},"3 total parallel processes")),(0,r.kt)("p",null,"On each CI node execute:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"export PARALLEL_TESTS_CONCURRENCY=3\n\nRAILS_ENV=test \\\n  KNAPSACK_PRO_TEST_SUITE_TOKEN_RSPEC=$MY_TOKEN \\\n  PARALLEL_TESTS_CONCURRENCY=$PARALLEL_TESTS_CONCURRENCY \\\n  bundle exec parallel_test -n $PARALLEL_TESTS_CONCURRENCY -e './bin/parallel_tests'\n")),(0,r.kt)("p",null,"Create ",(0,r.kt)("inlineCode",{parentName:"p"},"bin/parallel_tests")," and make it executable ",(0,r.kt)("inlineCode",{parentName:"p"},"chmod u+x"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n\n# The Knapsack Pro API sees 3 parallel nodes\nexport KNAPSACK_PRO_CI_NODE_TOTAL=$PARALLEL_TESTS_CONCURRENCY\n\nif [ "$TEST_ENV_NUMBER" == "" ]; then\n  export PARALLEL_TESTS_CONCURRENCY_INDEX=0\nelse\n  export PARALLEL_TESTS_CONCURRENCY_INDEX=$(( $TEST_ENV_NUMBER - 1 ))\nfi\n\n# The current index for the Knapsack Pro API is {0,1,2}\nKNAPSACK_PRO_CI_NODE_INDEX=$PARALLEL_TESTS_CONCURRENCY_INDEX\n\n# Debug log\necho KNAPSACK_PRO_CI_NODE_TOTAL=$KNAPSACK_PRO_CI_NODE_TOTAL KNAPSACK_PRO_CI_NODE_INDEX=$KNAPSACK_PRO_CI_NODE_INDEX PARALLEL_TESTS_CONCURRENCY=$PARALLEL_TESTS_CONCURRENCY\n\nbundle exec rake knapsack_pro:queue:rspec\n')),(0,r.kt)("p",null,"Running the above on CI should result in:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"First (and only) CI node:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"KNAPSACK_PRO_CI_NODE_TOTAL=3 KNAPSACK_PRO_CI_NODE_INDEX=0 PARALLEL_TESTS_CONCURRENCY=3\nKNAPSACK_PRO_CI_NODE_TOTAL=3 KNAPSACK_PRO_CI_NODE_INDEX=1 PARALLEL_TESTS_CONCURRENCY=3\nKNAPSACK_PRO_CI_NODE_TOTAL=3 KNAPSACK_PRO_CI_NODE_INDEX=2 PARALLEL_TESTS_CONCURRENCY=3\n# ...\n")),(0,r.kt)("h2",{id:"related-faqs"},"Related FAQs"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://knapsackpro.com/faq/question/how-to-run-knapsack_pro-with-parallel_tests-gem"},"How to run ",(0,r.kt)("inlineCode",{parentName:"a"},"knapsack_pro")," with ",(0,r.kt)("inlineCode",{parentName:"a"},"parallel_tests")," gem?")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://knapsackpro.com/faq/question/parallel_tests-with-knapsack_pro-on-parallel-ci-nodes"},(0,r.kt)("inlineCode",{parentName:"a"},"parallel_tests")," with ",(0,r.kt)("inlineCode",{parentName:"a"},"knapsack_pro")," on parallel CI nodes")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://knapsackpro.com/faq/question/parallel_tests-with-knapsack_pro-on-single-ci-machine"},(0,r.kt)("inlineCode",{parentName:"a"},"parallel_tests")," with ",(0,r.kt)("inlineCode",{parentName:"a"},"knapsack_pro")," on single CI machine"))))}N.isMDXComponent=!0}}]);