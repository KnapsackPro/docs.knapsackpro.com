"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[196],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>m});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=n.createContext({}),s=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},c=function(e){var r=s(e.components);return n.createElement(p.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(t),m=o,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||a;return t?n.createElement(f,i(i({ref:r},c),{},{components:t})):n.createElement(f,i({ref:r},c))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var l={};for(var p in r)hasOwnProperty.call(r,p)&&(l[p]=r[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},3342:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var n=t(7462),o=(t(7294),t(3905));const a={pagination_next:null,pagination_prev:null},i="Use Knapsack Pro in Queue Mode with SimpleCov",l={unversionedId:"ruby/simplecov",id:"ruby/simplecov",title:"Use Knapsack Pro in Queue Mode with SimpleCov",description:"This is needed only if you are using Knapsack Pro in Queue Mode.",source:"@site/docs/ruby/simplecov.md",sourceDirName:"ruby",slug:"/ruby/simplecov",permalink:"/ruby/simplecov",draft:!1,editUrl:"https://github.com/KnapsackPro/docs.knapsackpro.com/tree/main/docusaurus/docs/ruby/simplecov.md",tags:[],version:"current",frontMatter:{pagination_next:null,pagination_prev:null},sidebar:"sidebar"},p={},s=[{value:"Related reads",id:"related-reads",level:2},{value:"Related FAQs",id:"related-faqs",level:2}],c={toc:s};function u(e){let{components:r,...t}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"use-knapsack-pro-in-queue-mode-with-simplecov"},"Use Knapsack Pro in Queue Mode with SimpleCov"),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"This is needed only if you are using Knapsack Pro in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/KnapsackPro/knapsack_pro-ruby#queue-mode"},"Queue Mode"),".")),(0,o.kt)("p",null,"Apply the following patch:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ruby"},"# spec_helper.rb or rails_helper.rb\nrequire 'knapsack_pro'\n\nrequire 'simplecov'\nSimpleCov.start\n\nKnapsackPro::Hooks::Queue.before_queue do |queue_id|\n  SimpleCov.command_name(\"rspec_ci_node_#{KnapsackPro::Config::Env.ci_node_index}\")\nend\n")),(0,o.kt)("p",null,"This is needed to avoid conflicts between code coverage reports generated by parallel CI nodes."),(0,o.kt)("p",null,"If the local drive is common between parallel nodes on your CI, ",(0,o.kt)("inlineCode",{parentName:"p"},"simplecov")," will generate a single report at ",(0,o.kt)("inlineCode",{parentName:"p"},"coverage/index.html")," with merged data. Otherwise, you can refer to ",(0,o.kt)("a",{parentName:"p",href:"https://docs.knapsackpro.com/2019/how-to-merge-codeclimate-reports-for-parallel-jobs-ci-nodes"},"How to merge CodeClimate reports for parallel jobs (CI nodes)"),"."),(0,o.kt)("h2",{id:"related-reads"},"Related reads"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.knapsackpro.com/2020/how-to-merge-simplecov-results-with-parallel-rails-specs"},"How to merge SimpleCov results with parallel Rails specs on Semaphore CI"))),(0,o.kt)("h2",{id:"related-faqs"},"Related FAQs"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://knapsackpro.com/faq/question/how-to-use-simplecov-in-queue-mode"},"How to use simplecov in Queue Mode?"))))}u.isMDXComponent=!0}}]);