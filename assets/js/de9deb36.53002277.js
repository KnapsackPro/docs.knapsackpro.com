"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[694],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),i=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=i(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=i(r),m=a,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return r?n.createElement(h,s(s({ref:t},c),{},{components:r})):n.createElement(h,s({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,s[1]=l;for(var i=2;i<o;i++)s[i]=r[i];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},631:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>i});var n=r(7462),a=(r(7294),r(3905));const o={pagination_next:null,pagination_prev:null},s="Use Knapsack Pro with RSpec",l={unversionedId:"ruby/rspec",id:"ruby/rspec",title:"Use Knapsack Pro with RSpec",description:"Parallelize test examples (instead of files)",source:"@site/docs/ruby/rspec.md",sourceDirName:"ruby",slug:"/ruby/rspec",permalink:"/ruby/rspec",draft:!1,editUrl:"https://github.com/KnapsackPro/docs.knapsackpro.com/tree/main/docusaurus/docs/ruby/rspec.md",tags:[],version:"current",frontMatter:{pagination_next:null,pagination_prev:null}},p={},i=[{value:"Parallelize test examples (instead of files)",id:"parallelize-test-examples-instead-of-files",level:2},{value:"Related FAQs",id:"related-faqs",level:3},{value:"Formatters (<code>rspec_junit_formatter</code>, <code>json</code>)",id:"formatters-rspec_junit_formatter-json",level:2},{value:"Regular Mode",id:"regular-mode",level:3},{value:"Queue Mode",id:"queue-mode",level:3},{value:"Related FAQs",id:"related-faqs-1",level:3}],c={toc:i};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"use-knapsack-pro-with-rspec"},"Use Knapsack Pro with RSpec"),(0,a.kt)("h2",{id:"parallelize-test-examples-instead-of-files"},"Parallelize test examples (instead of files)"),(0,a.kt)("p",null,"You can set ",(0,a.kt)("a",{parentName:"p",href:"/ruby/reference/#knapsack_pro_rspec_split_by_test_examples-rspec"},(0,a.kt)("inlineCode",{parentName:"a"},"KNAPSACK_PRO_RSPEC_SPLIT_BY_TEST_EXAMPLES"))," to parallelize tests at the ",(0,a.kt)("inlineCode",{parentName:"p"},"it"),"/",(0,a.kt)("inlineCode",{parentName:"p"},"specify")," level across CI nodes."),(0,a.kt)("p",null,"As an example, imagine you have two test files in your suite:"),(0,a.kt)("div",{style:{overflowX:"auto"}},(0,a.kt)("table",{style:{width:"100%",display:"table"}},(0,a.kt)("thead",null,(0,a.kt)("tr",null,(0,a.kt)("th",{style:{whiteSpace:"nowrap"}},"Test file path (2 files)"),(0,a.kt)("th",{style:{width:"250px",whiteSpace:"nowrap"}},"Time execution"))),(0,a.kt)("tbody",null,(0,a.kt)("tr",{style:{backgroundColor:"#fcf8e3"}},(0,a.kt)("td",{style:{whiteSpace:"nowrap"}},"spec/controllers/api/v3/books_controller_spec.rb"),(0,a.kt)("td",{style:{width:"250px",whiteSpace:"nowrap"}},"6 minutes and 30 seconds")),(0,a.kt)("tr",{style:{backgroundColor:"#fcf8e3"}},(0,a.kt)("td",{style:{whiteSpace:"nowrap"}},"spec/features/books_spec.rb"),(0,a.kt)("td",{style:{width:"250px",whiteSpace:"nowrap"}},"2 minutes and 30 seconds"))))),(0,a.kt)("p",null,"On your ",(0,a.kt)("a",{parentName:"p",href:"/overview/#dashboard"},"Knapsack Pro dashboard"),", you can see the yellow highlights because of the bottleneck."),(0,a.kt)("p",null,"By enabling ",(0,a.kt)("inlineCode",{parentName:"p"},"KNAPSACK_PRO_RSPEC_SPLIT_BY_TEST_EXAMPLES"),", the bottleneck disappears because Knapsack Pro can distribute tests so that each CI node is balanced (e.g., 4.5 minutes + 4.5 minutes):"),(0,a.kt)("div",{style:{overflowX:"auto"}},(0,a.kt)("table",{style:{width:"100%",display:"table"}},(0,a.kt)("thead",null,(0,a.kt)("tr",null,(0,a.kt)("th",{style:{whiteSpace:"nowrap"}},"Test file path (5 files)"),(0,a.kt)("th",{style:{whiteSpace:"nowrap"}},"Time execution"))),(0,a.kt)("tbody",null,(0,a.kt)("tr",null,(0,a.kt)("td",{style:{whiteSpace:"nowrap"}},"spec/controllers/api/v3/books_controller_spec.rb[1:1]"),(0,a.kt)("td",{style:{width:"250px",whiteSpace:"nowrap"}},"2 minutes")),(0,a.kt)("tr",null,(0,a.kt)("td",{style:{whiteSpace:"nowrap"}},"spec/controllers/api/v3/books_controller_spec.rb[1:2]"),(0,a.kt)("td",{style:{width:"250px",whiteSpace:"nowrap"}},"2 minutes")),(0,a.kt)("tr",null,(0,a.kt)("td",{style:{whiteSpace:"nowrap"}},"spec/controllers/api/v3/books_controller_spec.rb[1:3]"),(0,a.kt)("td",{style:{width:"250px",whiteSpace:"nowrap"}},"2 minutes")),(0,a.kt)("tr",null,(0,a.kt)("td",{style:{whiteSpace:"nowrap"}},"spec/controllers/api/v3/books_controller_spec.rb[1:4]"),(0,a.kt)("td",{style:{width:"250px",whiteSpace:"nowrap"}},"30 seconds")),(0,a.kt)("tr",null,(0,a.kt)("td",{style:{whiteSpace:"nowrap"}},"spec/features/books_spec.rb[1:1]"),(0,a.kt)("td",{style:{width:"250px",whiteSpace:"nowrap"}},"1 minute and 15 seconds")),(0,a.kt)("tr",null,(0,a.kt)("td",{style:{whiteSpace:"nowrap"}},"spec/features/books_spec.rb[1:2]"),(0,a.kt)("td",{style:{width:"250px",whiteSpace:"nowrap"}},"1 minute and 15 seconds"))))),(0,a.kt)("p",null,"To avoid memory overhead, Knapsack Pro only splits bottleneck files by test examples and parallelizes the rest of your test suite by file."),(0,a.kt)("p",null,"We recommend running at least 2 CI builds after you enable this feature or change the number of CI nodes to allow the Knapsack Pro API to learn about your test suite."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Does not support ",(0,a.kt)("inlineCode",{parentName:"p"},"--tag"))),(0,a.kt)("p",null,"Due to the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/rspec/rspec-core/issues/2522"},"RSpec internals"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"--tag")," might be ignored when used together with ",(0,a.kt)("inlineCode",{parentName:"p"},"KNAPSACK_PRO_RSPEC_SPLIT_BY_TEST_EXAMPLES"),". But you can use the ",(0,a.kt)("a",{parentName:"p",href:"/ruby/reference"},"environment variables")," to filter the test files to run."),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"Does not support ",(0,a.kt)("inlineCode",{parentName:"p"},"run_all_when_everything_filtered"))),(0,a.kt)("p",null,"Make sure to use ",(0,a.kt)("a",{parentName:"p",href:"https://relishapp.com/rspec/rspec-core/v/3-12/docs/filtering/filter-run-when-matching"},(0,a.kt)("inlineCode",{parentName:"a"},"filter_run_when_matching"))," instead of the deprecated ",(0,a.kt)("a",{parentName:"p",href:"https://relishapp.com/rspec/rspec-core/v/2-3/docs/filtering/run-all-when-everything-filtered"},(0,a.kt)("inlineCode",{parentName:"a"},"run_all_when_everything_filtered")),". The latter may cause skipping some of your tests."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"# \u26d4\ufe0f Bad\nRSpec.configure do |c|\n  c.filter_run :focus => true\n  c.run_all_when_everything_filtered = true\nend\n\n# \u2705 Ok\nRSpec.configure do |c|\n  c.filter_run_when_matching :focus\nend\n")),(0,a.kt)("h3",{id:"related-faqs"},"Related FAQs"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://knapsackpro.com/faq/question/how-to-split-slow-rspec-test-files-by-test-examples-by-individual-it#warning-dont-use-deprecated-rspec-run_all_when_everything_filtered-option"},"How to split slow RSpec test files by test examples (by individual it)?"))),(0,a.kt)("h2",{id:"formatters-rspec_junit_formatter-json"},"Formatters (",(0,a.kt)("a",{parentName:"h2",href:"https://github.com/sj26/rspec_junit_formatter"},(0,a.kt)("inlineCode",{parentName:"a"},"rspec_junit_formatter")),", ",(0,a.kt)("a",{parentName:"h2",href:"https://relishapp.com/rspec/rspec-core/v/3-12/docs/formatters/json-formatter"},(0,a.kt)("inlineCode",{parentName:"a"},"json")),")"),(0,a.kt)("h3",{id:"regular-mode"},"Regular Mode"),(0,a.kt)("p",null,"Format stdout with the ",(0,a.kt)("inlineCode",{parentName:"p"},"documentation")," formatter and file output with the ",(0,a.kt)("inlineCode",{parentName:"p"},"RspecJunitFormatter")," formatter (you can use any RSpec supported formatter):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'bundle exec rake "knapsack_pro:rspec[--format documentation --format RspecJunitFormatter --out tmp/rspec.xml]"\n')),(0,a.kt)("h3",{id:"queue-mode"},"Queue Mode"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},'# Refer to your CI docs for `$MY_CI_NODE_INDEX`\nexport KNAPSACK_PRO_CI_NODE_INDEX=$MY_CI_NODE_INDEX\n\nbundle exec rake "knapsack_pro:queue:rspec[--format documentation --format RspecJunitFormatter --out tmp/rspec_$KNAPSACK_PRO_CI_NODE_INDEX.xml]"\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"# spec_helper.rb or rails_helper.rb\n\n# `TMP_REPORT` must be the same path as `--out`\n# `TMP_REPORT` must be a full path (no `~`)\nTMP_REPORT = \"tmp/tmp_rspec_#{ENV['KNAPSACK_PRO_CI_NODE_INDEX']}.xml\"\nFINAL_REPORT = \"tmp/final_rspec_#{ENV['KNAPSACK_PRO_CI_NODE_INDEX']}.xml\"\n\nKnapsackPro::Hooks::Queue.after_subset_queue do |queue_id, subset_queue_id|\n  if File.exist?(TMP_REPORT)\n    FileUtils.mv(TMP_REPORT, FINAL_REPORT)\n  end\nend\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"FINAL_REPORT")," will contain all the tests run on the CI node (not just the last subset). For more information, you can read this ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/KnapsackPro/knapsack_pro-ruby/issues/40"},"Github issue"),"."),(0,a.kt)("p",null,"If your CI nodes write to the same disk, you need to append the CI node index to the solution presented above to avoid conflicts:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ruby"},"TMP_REPORT = \"tmp/tmp_rspec_#{ENV['KNAPSACK_PRO_CI_NODE_INDEX']}.xml\"\nFINAL_REPORT = \"tmp/final_rspec_#{ENV['KNAPSACK_PRO_CI_NODE_INDEX']}.xml\"\n")),(0,a.kt)("p",null,"This applies also if you are running parallel test processes on each CI node (see our page on to integrate Knapsack Pro with ",(0,a.kt)("a",{parentName:"p",href:"/ruby/parallel_tests"},(0,a.kt)("inlineCode",{parentName:"a"},"parallel_tests"))," for an example)."),(0,a.kt)("h3",{id:"related-faqs-1"},"Related FAQs"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://knapsackpro.com/faq/question/how-to-use-junit-formatter"},"How to use junit formatter?")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://knapsackpro.com/faq/question/how-to-use-json-formatter-for-rspec"},"How to use JSON formatter for RSpec?"))))}u.isMDXComponent=!0}}]);